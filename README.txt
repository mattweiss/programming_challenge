#######
# Files
#######

Files are broken down into three categories:

      Class Modules:

	  dag_node.py - Defines dagNode, a node in a directed acyclic graph class
	  dag.py - Defines DAG, directed acyclic graph class

      Unit Test Modules:

          dag_node_unit_test.py - Unit test for dagNode class using Python unittest module
	  dag_unit_test.py - Unit test for DAG class using Python unittest module

      Unit Test Solution Modules:

      	  dag_node_test_data_1.py - Dictionary with sample node data for unit testing dagNode class
      	  dag_node_test_data_2.py - Second dictionary sample with node data for unit testing dagNode class
          dag_test_data_1.py - Dictionaries with solutions to Lightelligence Programming Challenge for unit testing DAG class
	  dag_test_data_2.py - Dictionaries with solutions to custom DAG (see Custom DAG Chart below) for unit testing DAG class

      Custom DAG Chart:

          custom_dag_chart.pdf - figure showing custom DAG topology

#############################
# Classes and Data Structures
#############################

The dagNode class has five attributes related to a node in a DAG: the node name, its connected arcs, and whether it is a supported, input and output node.

The DAG class stores its nodes in a dictionary with each key the name of the node and the values a dictionary of the node attributes above (minus the name).  

For more details on class attributes and methods please see related module files.

########################
# Partitioning Algorithm
########################

Subgraphs are partitioned by first grouping all supported and unsupported nodes separately.  Taking the supported nodes as an example, subgraphs are generated by checking which nodes can be reached by each supported node, conditioned on the fact they do not pass through an unsupported node.  This generates all supported subgraphs.  Applying the same process to unsupported nodes partitions the entire graph into the required supported and unsupported subgraphs.

Merging the subgraphs follow naturally, as the subgraphs are simply repopulated into the DAG's list of nodes.  This results from the fact the nodes in a DAG hold a list of their connected arcs and therefore ordering is not important.  Note, if a DAG is partitioned that DAG object has no entries in its nodes dictionary but instead a list of subgraphs, of which each element is a DAG object itself with nodes.  For an unpartitioned DAG, the list of subgraphs is empty with all nodes in the unpartitioned DAG's node dictionary.

####################
# Input Dictionaries
####################

For a dagNode the input dictionary passed to __init__ is:

    {'A':{'arcs':['B','D'],'supported':True,'input':True,'output':False}}

where the key 'A' is the node name and the value is a dictionary with node attributes.

A DAG object keeps a dictionary of dagNode objects where the node name is the key and node attributes the value as above.  For example, in a DAG object the Lightelligence Programming Challenge graph is represented as:

    {
        'A':{'arcs':['B'],'supported':True,'input':True,'output':False},
	'B':{'arcs':['C','D'],'supported':False,'input':False,'output':False},
	'C':{'arcs':['F'],'supported':True,'input':False,'output':False},
	'D':{'arcs':['E'],'supported':False,'input':False,'output':False},
	'E':{'arcs':['F'],'supported':True,'input':False,'output':False},
	'F':{'arcs':[None],'supported':True,'input':False,'output':True},
    }

############
# Unit Tests
############

Unit testing was done using the Python module unittest. (https://docs.python.org/3/library/unittest.html)

The specific test solution module (e.g. dag_test_data_1.py) is set in the corresponding unit test file.  For example, in dag_unit_test.py the following code appears at top:

    from dag_test_data_1 import dag_dict, pathExists_dict, pathExists_supported_dict, pathExists_unsupported_dict, supported_node_connections, unsupported_node_connections, subgraphs_list

where the necessary test dictionaries from the specific test solution module are loaded.

Below are a few examples with unittest

Example 1: Test all functions in DAG class

    python -m unittest dag_unit_test.dagUnitTest -v

Example 2: Test getNodes function in DAG class

    python -m unittest dag_unit_test.dagUnitTest.test_getNodes -v
